from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import LinkPreviewOptions
from aiogram.utils.i18n import gettext as _
from sqlalchemy.ext.asyncio import AsyncSession

from bot.filters.callbackdata import OffsetOfGameFactory
from bot.filters.state import EarnMoney
from bot.keyboards.inline.menu import main_keyboard, profile_keyboard, only_go_to_main_keyboard, games_keyboard
from bot.services.games import get_game_by_offset, get_games_count
from bot.services.users import get_user_money, get_user_data, add_money_by_id

router = Router(name="menu")


@router.message(Command(commands=["menu", "main"]))
async def menu_handler(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    """Return main menu."""
    await message.answer(_("title main keyboard"), reply_markup=main_keyboard())


@router.callback_query(F.data == "menu")
async def callback_menu_handler(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback_query.message.edit_text(_("title main keyboard"), reply_markup=main_keyboard())


@router.callback_query(F.data == "games")
@router.callback_query(OffsetOfGameFactory.filter())
async def callback_menu_handler(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession,
                                callback_data: OffsetOfGameFactory = OffsetOfGameFactory()) -> None:
    await state.clear()
    offset = callback_data.offset
    if offset < 0:
        offset = await get_games_count(session=session) - 1
        game = await get_game_by_offset(session=session, offset=offset)

    else:
        game = await get_game_by_offset(session=session, offset=offset)
        if game is None:
            offset = 0
            game = await get_game_by_offset(session=session, offset=offset)

    await callback_query.message.edit_text(f"{game.title}\n{game.description}",
                                           reply_markup=games_keyboard(offset=offset),
                                           link_preview_options=LinkPreviewOptions(
                                               is_disabled=False,
                                               url=game.thumbnail_url or "https://docs.python-telegram-bot.org/en/"
                                                                         "v13.10/_static/ptb-logo-orange.png",
                                               show_above_text=True,
                                               prefer_large_media=True
                                           ), )


@router.callback_query(F.data == "support")
async def callback_menu_handler(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback_query.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç @hardzz",
                                           reply_markup=only_go_to_main_keyboard())


@router.callback_query(F.data == "profile")
async def profile_handler(callback_query: types.CallbackQuery, session: AsyncSession) -> None:
    user = await get_user_data(session=session, user_id=callback_query.from_user.id)

    await callback_query.message.edit_text(text=
                                           f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {user.first_name}üññ\n\n"
                                           f"–í —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ —Ç—ã –º–æ–∂–µ—à—å:\n"
                                           f" * –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Çüí∏\n"
                                           f" * –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Äüìà\n"
                                           f" * –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Åüí∞: <b>{user.money or 0.0:.2f} —Ä—É–±–ª–µ–π</b>\n\n",
                                           reply_markup=profile_keyboard())


@router.callback_query(F.data == "add money")
async def profile_handler(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    await callback_query.message.edit_text(text=f"–ù–∞–∑–æ–≤–∏—Ç–µ, –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—É–º–º—É, –ì–æ—Å–ø–æ–¥–∏–Ω",
                                           reply_markup=only_go_to_main_keyboard())
    await state.set_state(EarnMoney.chose_counting)


@router.message(EarnMoney.chose_counting, F.text.regexp(r"\d+[\.]?\d+"))
async def add_money_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    old_money = await get_user_money(session=session, user_id=message.from_user.id)
    add_money = float(message.text)
    new_count_money = old_money + add_money
    await add_money_by_id(session=session, user_id=message.from_user.id, new_count_money=new_count_money)
    await message.answer(text=f"–í–∞–º –ø–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å –Ω–∞ +{add_money}\n–°–µ–π—á–∞—Å —É –≤–∞—Å {new_count_money} —Ä—É–±–ª–µ–π")
    await state.clear()
    await message.answer(_("title main keyboard"), reply_markup=main_keyboard())


@router.message(EarnMoney.chose_counting)
async def add_money_handler_exception(message: types.Message) -> None:
    await message.answer(text=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ.\n "
                              f"–í–æ–∑–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ \".\"\n\n"
                              f"–ù–æ –µ—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ /menu –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
